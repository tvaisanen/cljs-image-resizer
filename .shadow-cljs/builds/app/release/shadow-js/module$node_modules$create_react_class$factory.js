["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/create-react-class/factory.js"],"~:js","shadow$provide[6]=function(W,P,Y,u){function t(Q,ka,oa,U,Ba,aa,Ca,pa){if(!Q){if(void 0===ka)Q=Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var wa=[oa,U,Ba,aa,Ca,pa],va=0;Q=Error(ka.replace(/%s/g,function(){return wa[va++]}));Q.name=\"Invariant Violation\"}Q.framesToPop=1;throw Q;}}var M=P(0),Ga={};Y.exports=function(Q,ka,oa){function U(E,w){if(w){t(\"function\"!==typeof w,\"ReactClass: You're attempting to use a component class or function as a mixin. Instead, just use a regular object.\");\nt(!ka(w),\"ReactClass: You're attempting to use a component as a mixin. Instead, just use a regular object.\");var I=E.prototype,Z=I.__reactAutoBindPairs;w.hasOwnProperty(\"mixins\")&&Ha.mixins(E,w.mixins);for(var N in w)if(w.hasOwnProperty(N)&&\"mixins\"!==N){var xa=w[N],X=I.hasOwnProperty(N),ra=X,ia=N,da=wa.hasOwnProperty(ia)?wa[ia]:null;qa.hasOwnProperty(ia)&&t(\"OVERRIDE_BASE\"===da,\"ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.\",\nia);ra&&t(\"DEFINE_MANY\"===da||\"DEFINE_MANY_MERGED\"===da,\"ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.\",ia);if(Ha.hasOwnProperty(N))Ha[N](E,xa);else ra=wa.hasOwnProperty(N),\"function\"!==typeof xa||ra||X||!1===w.autobind?X?(X=wa[N],t(ra&&(\"DEFINE_MANY_MERGED\"===X||\"DEFINE_MANY\"===X),\"ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.\",X,N),\"DEFINE_MANY_MERGED\"===X?I[N]=aa(I[N],xa):\"DEFINE_MANY\"===\nX&&(I[N]=Ca(I[N],xa))):I[N]=xa:(Z.push(N,xa),I[N]=xa)}}}function Ba(E,w){t(E&&w&&\"object\"===typeof E&&\"object\"===typeof w,\"mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.\");for(var I in w)w.hasOwnProperty(I)&&(t(void 0===E[I],\"mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.\",I),E[I]=w[I]);return E}\nfunction aa(E,w){return function(){var I=E.apply(this,arguments),Z=w.apply(this,arguments);if(null==I)return Z;if(null==Z)return I;var N={};Ba(N,I);Ba(N,Z);return N}}function Ca(E,w){return function(){E.apply(this,arguments);w.apply(this,arguments)}}var pa=[],wa={mixins:\"DEFINE_MANY\",statics:\"DEFINE_MANY\",propTypes:\"DEFINE_MANY\",contextTypes:\"DEFINE_MANY\",childContextTypes:\"DEFINE_MANY\",getDefaultProps:\"DEFINE_MANY_MERGED\",getInitialState:\"DEFINE_MANY_MERGED\",getChildContext:\"DEFINE_MANY_MERGED\",\nrender:\"DEFINE_ONCE\",componentWillMount:\"DEFINE_MANY\",componentDidMount:\"DEFINE_MANY\",componentWillReceiveProps:\"DEFINE_MANY\",shouldComponentUpdate:\"DEFINE_ONCE\",componentWillUpdate:\"DEFINE_MANY\",componentDidUpdate:\"DEFINE_MANY\",componentWillUnmount:\"DEFINE_MANY\",UNSAFE_componentWillMount:\"DEFINE_MANY\",UNSAFE_componentWillReceiveProps:\"DEFINE_MANY\",UNSAFE_componentWillUpdate:\"DEFINE_MANY\",updateComponent:\"OVERRIDE_BASE\"},va={getDerivedStateFromProps:\"DEFINE_MANY_MERGED\"},Ha={displayName:function(E,\nw){E.displayName=w},mixins:function(E,w){if(w)for(var I=0;I<w.length;I++)U(E,w[I])},childContextTypes:function(E,w){E.childContextTypes=M({},E.childContextTypes,w)},contextTypes:function(E,w){E.contextTypes=M({},E.contextTypes,w)},getDefaultProps:function(E,w){E.getDefaultProps=E.getDefaultProps?aa(E.getDefaultProps,w):w},propTypes:function(E,w){E.propTypes=M({},E.propTypes,w)},statics:function(E,w){a:if(w)for(var I in w){var Z=w[I];if(w.hasOwnProperty(I)){t(!(I in Ha),'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it as an instance property instead; it will still be accessible on the constructor.',\nI);if(I in E){w=va.hasOwnProperty(I)?va[I]:null;t(\"DEFINE_MANY_MERGED\"===w,\"ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.\",I);E[I]=aa(E[I],Z);break a}E[I]=Z}}},autobind:function(){}},ab={componentDidMount:function(){this.__isMounted=!0}},Wa={componentWillUnmount:function(){this.__isMounted=!1}},qa={replaceState:function(E,w){this.updater.enqueueReplaceState(this,E,w)},isMounted:function(){return!!this.__isMounted}},bb=function(){};\nM(bb.prototype,Q.prototype,qa);return function(E){var w=function(Z,N,xa){if(this.__reactAutoBindPairs.length)for(var X=this.__reactAutoBindPairs,ra=0;ra<X.length;ra+=2){var ia=X[ra];var da=X[ra+1].bind(this);this[ia]=da}this.props=Z;this.context=N;this.refs=Ga;this.updater=xa||oa;this.state=null;Z=this.getInitialState?this.getInitialState():null;t(\"object\"===typeof Z&&!Array.isArray(Z),\"%s.getInitialState(): must return an object or null\",w.displayName||\"ReactCompositeComponent\");this.state=Z};w.prototype=\nnew bb;w.prototype.constructor=w;w.prototype.__reactAutoBindPairs=[];pa.forEach(U.bind(null,w));U(w,ab);U(w,E);U(w,Wa);w.getDefaultProps&&(w.defaultProps=w.getDefaultProps());t(w.prototype.render,\"createClass(...): Class specification must implement a `render` method.\");for(var I in wa)w.prototype[I]||(w.prototype[I]=null);return w}}}","~:source","shadow$provide[6] = function(global,require,module,exports) {\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\n// -- Inlined from fbjs --\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction _invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nvar warning = function(){};\n\nif (process.env.NODE_ENV !== 'production') {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\n// /-- Inlined from fbjs --\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isAlreadyDefined = name in Constructor;\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\n          ? ReactClassStaticInterface[name]\n          : null;\n\n        _invariant(\n          specPolicy === 'DEFINE_MANY_MERGED',\n          'ReactClass: You are attempting to define ' +\n            '`%s` on your component more than once. This conflict may be ' +\n            'due to a mixin.',\n          name\n        );\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$object_assign$index","~$shadow.js"]],"~:properties",["^5",["componentWillMount","updateComponent","getDerivedStateFromProps","getChildContext","updater","framesToPop","childContextTypes","autobind","prototype","mixins","displayName","UNSAFE_componentWillMount","statics","propTypes","getDefaultProps","name","context","componentDidUpdate","getInitialState","UNSAFE_componentWillReceiveProps","contextTypes","replaceState","componentDidMount","props","defaultProps","__isMounted","__reactAutoBindPairs","shouldComponentUpdate","render","componentWillUpdate","state","UNSAFE_componentWillUpdate","componentWillUnmount","componentWillReceiveProps","isMounted","constructor","refs"]],"~:compiled-at",1629312590915,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$create_react_class$factory.js\",\n\"lineCount\":10,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/create-react-class/factory.js\"],\n\"sourcesContent\":[\"shadow$provide[6] = function(global,require,module,exports) {\\n/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n *\\n */\\n\\n'use strict';\\n\\nvar _assign = require('object-assign');\\n\\n// -- Inlined from fbjs --\\n\\nvar emptyObject = {};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  Object.freeze(emptyObject);\\n}\\n\\nvar validateFormat = function validateFormat(format) {};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  validateFormat = function validateFormat(format) {\\n    if (format === undefined) {\\n      throw new Error('invariant requires an error message argument');\\n    }\\n  };\\n}\\n\\nfunction _invariant(condition, format, a, b, c, d, e, f) {\\n  validateFormat(format);\\n\\n  if (!condition) {\\n    var error;\\n    if (format === undefined) {\\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\\n    } else {\\n      var args = [a, b, c, d, e, f];\\n      var argIndex = 0;\\n      error = new Error(format.replace(/%s/g, function () {\\n        return args[argIndex++];\\n      }));\\n      error.name = 'Invariant Violation';\\n    }\\n\\n    error.framesToPop = 1; // we don't care about invariant's own frame\\n    throw error;\\n  }\\n}\\n\\nvar warning = function(){};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  var printWarning = function printWarning(format) {\\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n      args[_key - 1] = arguments[_key];\\n    }\\n\\n    var argIndex = 0;\\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\\n      return args[argIndex++];\\n    });\\n    if (typeof console !== 'undefined') {\\n      console.error(message);\\n    }\\n    try {\\n      // --- Welcome to debugging React ---\\n      // This error was thrown as a convenience so that you can use this stack\\n      // to find the callsite that caused this warning to fire.\\n      throw new Error(message);\\n    } catch (x) {}\\n  };\\n\\n  warning = function warning(condition, format) {\\n    if (format === undefined) {\\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\\n    }\\n\\n    if (format.indexOf('Failed Composite propType: ') === 0) {\\n      return; // Ignore CompositeComponent proptype check.\\n    }\\n\\n    if (!condition) {\\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\\n        args[_key2 - 2] = arguments[_key2];\\n      }\\n\\n      printWarning.apply(undefined, [format].concat(args));\\n    }\\n  };\\n}\\n\\n// /-- Inlined from fbjs --\\n\\nvar MIXINS_KEY = 'mixins';\\n\\n// Helper function to allow the creation of anonymous functions which do not\\n// have .name set to the name of the variable being assigned to.\\nfunction identity(fn) {\\n  return fn;\\n}\\n\\nvar ReactPropTypeLocationNames;\\nif (process.env.NODE_ENV !== 'production') {\\n  ReactPropTypeLocationNames = {\\n    prop: 'prop',\\n    context: 'context',\\n    childContext: 'child context'\\n  };\\n} else {\\n  ReactPropTypeLocationNames = {};\\n}\\n\\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\\n  /**\\n   * Policies that describe methods in `ReactClassInterface`.\\n   */\\n\\n  var injectedMixins = [];\\n\\n  /**\\n   * Composite components are higher-level components that compose other composite\\n   * or host components.\\n   *\\n   * To create a new type of `ReactClass`, pass a specification of\\n   * your new class to `React.createClass`. The only requirement of your class\\n   * specification is that you implement a `render` method.\\n   *\\n   *   var MyComponent = React.createClass({\\n   *     render: function() {\\n   *       return <div>Hello World</div>;\\n   *     }\\n   *   });\\n   *\\n   * The class specification supports a specific protocol of methods that have\\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\\n   * more the comprehensive protocol. Any other properties and methods in the\\n   * class specification will be available on the prototype.\\n   *\\n   * @interface ReactClassInterface\\n   * @internal\\n   */\\n  var ReactClassInterface = {\\n    /**\\n     * An array of Mixin objects to include when defining your component.\\n     *\\n     * @type {array}\\n     * @optional\\n     */\\n    mixins: 'DEFINE_MANY',\\n\\n    /**\\n     * An object containing properties and methods that should be defined on\\n     * the component's constructor instead of its prototype (static methods).\\n     *\\n     * @type {object}\\n     * @optional\\n     */\\n    statics: 'DEFINE_MANY',\\n\\n    /**\\n     * Definition of prop types for this component.\\n     *\\n     * @type {object}\\n     * @optional\\n     */\\n    propTypes: 'DEFINE_MANY',\\n\\n    /**\\n     * Definition of context types for this component.\\n     *\\n     * @type {object}\\n     * @optional\\n     */\\n    contextTypes: 'DEFINE_MANY',\\n\\n    /**\\n     * Definition of context types this component sets for its children.\\n     *\\n     * @type {object}\\n     * @optional\\n     */\\n    childContextTypes: 'DEFINE_MANY',\\n\\n    // ==== Definition methods ====\\n\\n    /**\\n     * Invoked when the component is mounted. Values in the mapping will be set on\\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\\n     *\\n     * This method is invoked before `getInitialState` and therefore cannot rely\\n     * on `this.state` or use `this.setState`.\\n     *\\n     * @return {object}\\n     * @optional\\n     */\\n    getDefaultProps: 'DEFINE_MANY_MERGED',\\n\\n    /**\\n     * Invoked once before the component is mounted. The return value will be used\\n     * as the initial value of `this.state`.\\n     *\\n     *   getInitialState: function() {\\n     *     return {\\n     *       isOn: false,\\n     *       fooBaz: new BazFoo()\\n     *     }\\n     *   }\\n     *\\n     * @return {object}\\n     * @optional\\n     */\\n    getInitialState: 'DEFINE_MANY_MERGED',\\n\\n    /**\\n     * @return {object}\\n     * @optional\\n     */\\n    getChildContext: 'DEFINE_MANY_MERGED',\\n\\n    /**\\n     * Uses props from `this.props` and state from `this.state` to render the\\n     * structure of the component.\\n     *\\n     * No guarantees are made about when or how often this method is invoked, so\\n     * it must not have side effects.\\n     *\\n     *   render: function() {\\n     *     var name = this.props.name;\\n     *     return <div>Hello, {name}!</div>;\\n     *   }\\n     *\\n     * @return {ReactComponent}\\n     * @required\\n     */\\n    render: 'DEFINE_ONCE',\\n\\n    // ==== Delegate methods ====\\n\\n    /**\\n     * Invoked when the component is initially created and about to be mounted.\\n     * This may have side effects, but any external subscriptions or data created\\n     * by this method must be cleaned up in `componentWillUnmount`.\\n     *\\n     * @optional\\n     */\\n    componentWillMount: 'DEFINE_MANY',\\n\\n    /**\\n     * Invoked when the component has been mounted and has a DOM representation.\\n     * However, there is no guarantee that the DOM node is in the document.\\n     *\\n     * Use this as an opportunity to operate on the DOM when the component has\\n     * been mounted (initialized and rendered) for the first time.\\n     *\\n     * @param {DOMElement} rootNode DOM element representing the component.\\n     * @optional\\n     */\\n    componentDidMount: 'DEFINE_MANY',\\n\\n    /**\\n     * Invoked before the component receives new props.\\n     *\\n     * Use this as an opportunity to react to a prop transition by updating the\\n     * state using `this.setState`. Current props are accessed via `this.props`.\\n     *\\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\\n     *     this.setState({\\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\\n     *     });\\n     *   }\\n     *\\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\\n     * transition may cause a state change, but the opposite is not true. If you\\n     * need it, you are probably looking for `componentWillUpdate`.\\n     *\\n     * @param {object} nextProps\\n     * @optional\\n     */\\n    componentWillReceiveProps: 'DEFINE_MANY',\\n\\n    /**\\n     * Invoked while deciding if the component should be updated as a result of\\n     * receiving new props, state and/or context.\\n     *\\n     * Use this as an opportunity to `return false` when you're certain that the\\n     * transition to the new props/state/context will not require a component\\n     * update.\\n     *\\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\\n     *     return !equal(nextProps, this.props) ||\\n     *       !equal(nextState, this.state) ||\\n     *       !equal(nextContext, this.context);\\n     *   }\\n     *\\n     * @param {object} nextProps\\n     * @param {?object} nextState\\n     * @param {?object} nextContext\\n     * @return {boolean} True if the component should update.\\n     * @optional\\n     */\\n    shouldComponentUpdate: 'DEFINE_ONCE',\\n\\n    /**\\n     * Invoked when the component is about to update due to a transition from\\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\\n     * and `nextContext`.\\n     *\\n     * Use this as an opportunity to perform preparation before an update occurs.\\n     *\\n     * NOTE: You **cannot** use `this.setState()` in this method.\\n     *\\n     * @param {object} nextProps\\n     * @param {?object} nextState\\n     * @param {?object} nextContext\\n     * @param {ReactReconcileTransaction} transaction\\n     * @optional\\n     */\\n    componentWillUpdate: 'DEFINE_MANY',\\n\\n    /**\\n     * Invoked when the component's DOM representation has been updated.\\n     *\\n     * Use this as an opportunity to operate on the DOM when the component has\\n     * been updated.\\n     *\\n     * @param {object} prevProps\\n     * @param {?object} prevState\\n     * @param {?object} prevContext\\n     * @param {DOMElement} rootNode DOM element representing the component.\\n     * @optional\\n     */\\n    componentDidUpdate: 'DEFINE_MANY',\\n\\n    /**\\n     * Invoked when the component is about to be removed from its parent and have\\n     * its DOM representation destroyed.\\n     *\\n     * Use this as an opportunity to deallocate any external resources.\\n     *\\n     * NOTE: There is no `componentDidUnmount` since your component will have been\\n     * destroyed by that point.\\n     *\\n     * @optional\\n     */\\n    componentWillUnmount: 'DEFINE_MANY',\\n\\n    /**\\n     * Replacement for (deprecated) `componentWillMount`.\\n     *\\n     * @optional\\n     */\\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\\n\\n    /**\\n     * Replacement for (deprecated) `componentWillReceiveProps`.\\n     *\\n     * @optional\\n     */\\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\\n\\n    /**\\n     * Replacement for (deprecated) `componentWillUpdate`.\\n     *\\n     * @optional\\n     */\\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\\n\\n    // ==== Advanced methods ====\\n\\n    /**\\n     * Updates the component's currently mounted DOM representation.\\n     *\\n     * By default, this implements React's rendering and reconciliation algorithm.\\n     * Sophisticated clients may wish to override this.\\n     *\\n     * @param {ReactReconcileTransaction} transaction\\n     * @internal\\n     * @overridable\\n     */\\n    updateComponent: 'OVERRIDE_BASE'\\n  };\\n\\n  /**\\n   * Similar to ReactClassInterface but for static methods.\\n   */\\n  var ReactClassStaticInterface = {\\n    /**\\n     * This method is invoked after a component is instantiated and when it\\n     * receives new props. Return an object to update state in response to\\n     * prop changes. Return null to indicate no change to state.\\n     *\\n     * If an object is returned, its keys will be merged into the existing state.\\n     *\\n     * @return {object || null}\\n     * @optional\\n     */\\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\\n  };\\n\\n  /**\\n   * Mapping from class specification keys to special processing functions.\\n   *\\n   * Although these are declared like instance properties in the specification\\n   * when defining classes using `React.createClass`, they are actually static\\n   * and are accessible on the constructor instead of the prototype. Despite\\n   * being static, they must be defined outside of the \\\"statics\\\" key under\\n   * which all other static methods are defined.\\n   */\\n  var RESERVED_SPEC_KEYS = {\\n    displayName: function(Constructor, displayName) {\\n      Constructor.displayName = displayName;\\n    },\\n    mixins: function(Constructor, mixins) {\\n      if (mixins) {\\n        for (var i = 0; i < mixins.length; i++) {\\n          mixSpecIntoComponent(Constructor, mixins[i]);\\n        }\\n      }\\n    },\\n    childContextTypes: function(Constructor, childContextTypes) {\\n      if (process.env.NODE_ENV !== 'production') {\\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\\n      }\\n      Constructor.childContextTypes = _assign(\\n        {},\\n        Constructor.childContextTypes,\\n        childContextTypes\\n      );\\n    },\\n    contextTypes: function(Constructor, contextTypes) {\\n      if (process.env.NODE_ENV !== 'production') {\\n        validateTypeDef(Constructor, contextTypes, 'context');\\n      }\\n      Constructor.contextTypes = _assign(\\n        {},\\n        Constructor.contextTypes,\\n        contextTypes\\n      );\\n    },\\n    /**\\n     * Special case getDefaultProps which should move into statics but requires\\n     * automatic merging.\\n     */\\n    getDefaultProps: function(Constructor, getDefaultProps) {\\n      if (Constructor.getDefaultProps) {\\n        Constructor.getDefaultProps = createMergedResultFunction(\\n          Constructor.getDefaultProps,\\n          getDefaultProps\\n        );\\n      } else {\\n        Constructor.getDefaultProps = getDefaultProps;\\n      }\\n    },\\n    propTypes: function(Constructor, propTypes) {\\n      if (process.env.NODE_ENV !== 'production') {\\n        validateTypeDef(Constructor, propTypes, 'prop');\\n      }\\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\\n    },\\n    statics: function(Constructor, statics) {\\n      mixStaticSpecIntoComponent(Constructor, statics);\\n    },\\n    autobind: function() {}\\n  };\\n\\n  function validateTypeDef(Constructor, typeDef, location) {\\n    for (var propName in typeDef) {\\n      if (typeDef.hasOwnProperty(propName)) {\\n        // use a warning instead of an _invariant so components\\n        // don't show up in prod but only in __DEV__\\n        if (process.env.NODE_ENV !== 'production') {\\n          warning(\\n            typeof typeDef[propName] === 'function',\\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\\n              'React.PropTypes.',\\n            Constructor.displayName || 'ReactClass',\\n            ReactPropTypeLocationNames[location],\\n            propName\\n          );\\n        }\\n      }\\n    }\\n  }\\n\\n  function validateMethodOverride(isAlreadyDefined, name) {\\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\\n      ? ReactClassInterface[name]\\n      : null;\\n\\n    // Disallow overriding of base class methods unless explicitly allowed.\\n    if (ReactClassMixin.hasOwnProperty(name)) {\\n      _invariant(\\n        specPolicy === 'OVERRIDE_BASE',\\n        'ReactClassInterface: You are attempting to override ' +\\n          '`%s` from your class specification. Ensure that your method names ' +\\n          'do not overlap with React methods.',\\n        name\\n      );\\n    }\\n\\n    // Disallow defining methods more than once unless explicitly allowed.\\n    if (isAlreadyDefined) {\\n      _invariant(\\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\\n        'ReactClassInterface: You are attempting to define ' +\\n          '`%s` on your component more than once. This conflict may be due ' +\\n          'to a mixin.',\\n        name\\n      );\\n    }\\n  }\\n\\n  /**\\n   * Mixin helper which handles policy validation and reserved\\n   * specification keys when building React classes.\\n   */\\n  function mixSpecIntoComponent(Constructor, spec) {\\n    if (!spec) {\\n      if (process.env.NODE_ENV !== 'production') {\\n        var typeofSpec = typeof spec;\\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\\n\\n        if (process.env.NODE_ENV !== 'production') {\\n          warning(\\n            isMixinValid,\\n            \\\"%s: You're attempting to include a mixin that is either null \\\" +\\n              'or not an object. Check the mixins included by the component, ' +\\n              'as well as any mixins they include themselves. ' +\\n              'Expected object but got %s.',\\n            Constructor.displayName || 'ReactClass',\\n            spec === null ? null : typeofSpec\\n          );\\n        }\\n      }\\n\\n      return;\\n    }\\n\\n    _invariant(\\n      typeof spec !== 'function',\\n      \\\"ReactClass: You're attempting to \\\" +\\n        'use a component class or function as a mixin. Instead, just use a ' +\\n        'regular object.'\\n    );\\n    _invariant(\\n      !isValidElement(spec),\\n      \\\"ReactClass: You're attempting to \\\" +\\n        'use a component as a mixin. Instead, just use a regular object.'\\n    );\\n\\n    var proto = Constructor.prototype;\\n    var autoBindPairs = proto.__reactAutoBindPairs;\\n\\n    // By handling mixins before any other properties, we ensure the same\\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\\n    // mixins are listed before or after these methods in the spec.\\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\\n    }\\n\\n    for (var name in spec) {\\n      if (!spec.hasOwnProperty(name)) {\\n        continue;\\n      }\\n\\n      if (name === MIXINS_KEY) {\\n        // We have already handled mixins in a special case above.\\n        continue;\\n      }\\n\\n      var property = spec[name];\\n      var isAlreadyDefined = proto.hasOwnProperty(name);\\n      validateMethodOverride(isAlreadyDefined, name);\\n\\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\\n        RESERVED_SPEC_KEYS[name](Constructor, property);\\n      } else {\\n        // Setup methods on prototype:\\n        // The following member methods should not be automatically bound:\\n        // 1. Expected ReactClass methods (in the \\\"interface\\\").\\n        // 2. Overridden methods (that were mixed in).\\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\\n        var isFunction = typeof property === 'function';\\n        var shouldAutoBind =\\n          isFunction &&\\n          !isReactClassMethod &&\\n          !isAlreadyDefined &&\\n          spec.autobind !== false;\\n\\n        if (shouldAutoBind) {\\n          autoBindPairs.push(name, property);\\n          proto[name] = property;\\n        } else {\\n          if (isAlreadyDefined) {\\n            var specPolicy = ReactClassInterface[name];\\n\\n            // These cases should already be caught by validateMethodOverride.\\n            _invariant(\\n              isReactClassMethod &&\\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\\n                  specPolicy === 'DEFINE_MANY'),\\n              'ReactClass: Unexpected spec policy %s for key %s ' +\\n                'when mixing in component specs.',\\n              specPolicy,\\n              name\\n            );\\n\\n            // For methods which are defined more than once, call the existing\\n            // methods before calling the new property, merging if appropriate.\\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\\n              proto[name] = createMergedResultFunction(proto[name], property);\\n            } else if (specPolicy === 'DEFINE_MANY') {\\n              proto[name] = createChainedFunction(proto[name], property);\\n            }\\n          } else {\\n            proto[name] = property;\\n            if (process.env.NODE_ENV !== 'production') {\\n              // Add verbose displayName to the function, which helps when looking\\n              // at profiling tools.\\n              if (typeof property === 'function' && spec.displayName) {\\n                proto[name].displayName = spec.displayName + '_' + name;\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function mixStaticSpecIntoComponent(Constructor, statics) {\\n    if (!statics) {\\n      return;\\n    }\\n\\n    for (var name in statics) {\\n      var property = statics[name];\\n      if (!statics.hasOwnProperty(name)) {\\n        continue;\\n      }\\n\\n      var isReserved = name in RESERVED_SPEC_KEYS;\\n      _invariant(\\n        !isReserved,\\n        'ReactClass: You are attempting to define a reserved ' +\\n          'property, `%s`, that shouldn\\\\'t be on the \\\"statics\\\" key. Define it ' +\\n          'as an instance property instead; it will still be accessible on the ' +\\n          'constructor.',\\n        name\\n      );\\n\\n      var isAlreadyDefined = name in Constructor;\\n      if (isAlreadyDefined) {\\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\\n          ? ReactClassStaticInterface[name]\\n          : null;\\n\\n        _invariant(\\n          specPolicy === 'DEFINE_MANY_MERGED',\\n          'ReactClass: You are attempting to define ' +\\n            '`%s` on your component more than once. This conflict may be ' +\\n            'due to a mixin.',\\n          name\\n        );\\n\\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\\n\\n        return;\\n      }\\n\\n      Constructor[name] = property;\\n    }\\n  }\\n\\n  /**\\n   * Merge two objects, but throw if both contain the same key.\\n   *\\n   * @param {object} one The first object, which is mutated.\\n   * @param {object} two The second object\\n   * @return {object} one after it has been mutated to contain everything in two.\\n   */\\n  function mergeIntoWithNoDuplicateKeys(one, two) {\\n    _invariant(\\n      one && two && typeof one === 'object' && typeof two === 'object',\\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\\n    );\\n\\n    for (var key in two) {\\n      if (two.hasOwnProperty(key)) {\\n        _invariant(\\n          one[key] === undefined,\\n          'mergeIntoWithNoDuplicateKeys(): ' +\\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\\n            'may be due to a mixin; in particular, this may be caused by two ' +\\n            'getInitialState() or getDefaultProps() methods returning objects ' +\\n            'with clashing keys.',\\n          key\\n        );\\n        one[key] = two[key];\\n      }\\n    }\\n    return one;\\n  }\\n\\n  /**\\n   * Creates a function that invokes two functions and merges their return values.\\n   *\\n   * @param {function} one Function to invoke first.\\n   * @param {function} two Function to invoke second.\\n   * @return {function} Function that invokes the two argument functions.\\n   * @private\\n   */\\n  function createMergedResultFunction(one, two) {\\n    return function mergedResult() {\\n      var a = one.apply(this, arguments);\\n      var b = two.apply(this, arguments);\\n      if (a == null) {\\n        return b;\\n      } else if (b == null) {\\n        return a;\\n      }\\n      var c = {};\\n      mergeIntoWithNoDuplicateKeys(c, a);\\n      mergeIntoWithNoDuplicateKeys(c, b);\\n      return c;\\n    };\\n  }\\n\\n  /**\\n   * Creates a function that invokes two functions and ignores their return vales.\\n   *\\n   * @param {function} one Function to invoke first.\\n   * @param {function} two Function to invoke second.\\n   * @return {function} Function that invokes the two argument functions.\\n   * @private\\n   */\\n  function createChainedFunction(one, two) {\\n    return function chainedFunction() {\\n      one.apply(this, arguments);\\n      two.apply(this, arguments);\\n    };\\n  }\\n\\n  /**\\n   * Binds a method to the component.\\n   *\\n   * @param {object} component Component whose method is going to be bound.\\n   * @param {function} method Method to be bound.\\n   * @return {function} The bound method.\\n   */\\n  function bindAutoBindMethod(component, method) {\\n    var boundMethod = method.bind(component);\\n    if (process.env.NODE_ENV !== 'production') {\\n      boundMethod.__reactBoundContext = component;\\n      boundMethod.__reactBoundMethod = method;\\n      boundMethod.__reactBoundArguments = null;\\n      var componentName = component.constructor.displayName;\\n      var _bind = boundMethod.bind;\\n      boundMethod.bind = function(newThis) {\\n        for (\\n          var _len = arguments.length,\\n            args = Array(_len > 1 ? _len - 1 : 0),\\n            _key = 1;\\n          _key < _len;\\n          _key++\\n        ) {\\n          args[_key - 1] = arguments[_key];\\n        }\\n\\n        // User is trying to bind() an autobound method; we effectively will\\n        // ignore the value of \\\"this\\\" that the user is trying to use, so\\n        // let's warn.\\n        if (newThis !== component && newThis !== null) {\\n          if (process.env.NODE_ENV !== 'production') {\\n            warning(\\n              false,\\n              'bind(): React component methods may only be bound to the ' +\\n                'component instance. See %s',\\n              componentName\\n            );\\n          }\\n        } else if (!args.length) {\\n          if (process.env.NODE_ENV !== 'production') {\\n            warning(\\n              false,\\n              'bind(): You are binding a component method to the component. ' +\\n                'React does this for you automatically in a high-performance ' +\\n                'way, so you can safely remove this call. See %s',\\n              componentName\\n            );\\n          }\\n          return boundMethod;\\n        }\\n        var reboundMethod = _bind.apply(boundMethod, arguments);\\n        reboundMethod.__reactBoundContext = component;\\n        reboundMethod.__reactBoundMethod = method;\\n        reboundMethod.__reactBoundArguments = args;\\n        return reboundMethod;\\n      };\\n    }\\n    return boundMethod;\\n  }\\n\\n  /**\\n   * Binds all auto-bound methods in a component.\\n   *\\n   * @param {object} component Component whose method is going to be bound.\\n   */\\n  function bindAutoBindMethods(component) {\\n    var pairs = component.__reactAutoBindPairs;\\n    for (var i = 0; i < pairs.length; i += 2) {\\n      var autoBindKey = pairs[i];\\n      var method = pairs[i + 1];\\n      component[autoBindKey] = bindAutoBindMethod(component, method);\\n    }\\n  }\\n\\n  var IsMountedPreMixin = {\\n    componentDidMount: function() {\\n      this.__isMounted = true;\\n    }\\n  };\\n\\n  var IsMountedPostMixin = {\\n    componentWillUnmount: function() {\\n      this.__isMounted = false;\\n    }\\n  };\\n\\n  /**\\n   * Add more to the ReactClass base class. These are all legacy features and\\n   * therefore not already part of the modern ReactComponent.\\n   */\\n  var ReactClassMixin = {\\n    /**\\n     * TODO: This will be deprecated because state should always keep a consistent\\n     * type signature and the only use case for this, is to avoid that.\\n     */\\n    replaceState: function(newState, callback) {\\n      this.updater.enqueueReplaceState(this, newState, callback);\\n    },\\n\\n    /**\\n     * Checks whether or not this composite component is mounted.\\n     * @return {boolean} True if mounted, false otherwise.\\n     * @protected\\n     * @final\\n     */\\n    isMounted: function() {\\n      if (process.env.NODE_ENV !== 'production') {\\n        warning(\\n          this.__didWarnIsMounted,\\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\\n            'subscriptions and pending requests in componentWillUnmount to ' +\\n            'prevent memory leaks.',\\n          (this.constructor && this.constructor.displayName) ||\\n            this.name ||\\n            'Component'\\n        );\\n        this.__didWarnIsMounted = true;\\n      }\\n      return !!this.__isMounted;\\n    }\\n  };\\n\\n  var ReactClassComponent = function() {};\\n  _assign(\\n    ReactClassComponent.prototype,\\n    ReactComponent.prototype,\\n    ReactClassMixin\\n  );\\n\\n  /**\\n   * Creates a composite component class given a class specification.\\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\\n   *\\n   * @param {object} spec Class specification (which must define `render`).\\n   * @return {function} Component constructor function.\\n   * @public\\n   */\\n  function createClass(spec) {\\n    // To keep our warnings more understandable, we'll use a little hack here to\\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\\n    // unnecessarily identify a class without displayName as 'Constructor'.\\n    var Constructor = identity(function(props, context, updater) {\\n      // This constructor gets overridden by mocks. The argument is used\\n      // by mocks to assert on what gets mounted.\\n\\n      if (process.env.NODE_ENV !== 'production') {\\n        warning(\\n          this instanceof Constructor,\\n          'Something is calling a React component directly. Use a factory or ' +\\n            'JSX instead. See: https://fb.me/react-legacyfactory'\\n        );\\n      }\\n\\n      // Wire up auto-binding\\n      if (this.__reactAutoBindPairs.length) {\\n        bindAutoBindMethods(this);\\n      }\\n\\n      this.props = props;\\n      this.context = context;\\n      this.refs = emptyObject;\\n      this.updater = updater || ReactNoopUpdateQueue;\\n\\n      this.state = null;\\n\\n      // ReactClasses doesn't have constructors. Instead, they use the\\n      // getInitialState and componentWillMount methods for initialization.\\n\\n      var initialState = this.getInitialState ? this.getInitialState() : null;\\n      if (process.env.NODE_ENV !== 'production') {\\n        // We allow auto-mocks to proceed as if they're returning null.\\n        if (\\n          initialState === undefined &&\\n          this.getInitialState._isMockFunction\\n        ) {\\n          // This is probably bad practice. Consider warning here and\\n          // deprecating this convenience.\\n          initialState = null;\\n        }\\n      }\\n      _invariant(\\n        typeof initialState === 'object' && !Array.isArray(initialState),\\n        '%s.getInitialState(): must return an object or null',\\n        Constructor.displayName || 'ReactCompositeComponent'\\n      );\\n\\n      this.state = initialState;\\n    });\\n    Constructor.prototype = new ReactClassComponent();\\n    Constructor.prototype.constructor = Constructor;\\n    Constructor.prototype.__reactAutoBindPairs = [];\\n\\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\\n\\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\\n    mixSpecIntoComponent(Constructor, spec);\\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\\n\\n    // Initialize the defaultProps property after all mixins have been merged.\\n    if (Constructor.getDefaultProps) {\\n      Constructor.defaultProps = Constructor.getDefaultProps();\\n    }\\n\\n    if (process.env.NODE_ENV !== 'production') {\\n      // This is a tag to indicate that the use of these method names is ok,\\n      // since it's used with createClass. If it's not, then it's likely a\\n      // mistake so we'll warn you to use the static property, property\\n      // initializer or constructor respectively.\\n      if (Constructor.getDefaultProps) {\\n        Constructor.getDefaultProps.isReactClassApproved = {};\\n      }\\n      if (Constructor.prototype.getInitialState) {\\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\\n      }\\n    }\\n\\n    _invariant(\\n      Constructor.prototype.render,\\n      'createClass(...): Class specification must implement a `render` method.'\\n    );\\n\\n    if (process.env.NODE_ENV !== 'production') {\\n      warning(\\n        !Constructor.prototype.componentShouldUpdate,\\n        '%s has a method called ' +\\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\\n          'The name is phrased as a question because the function is ' +\\n          'expected to return a value.',\\n        spec.displayName || 'A component'\\n      );\\n      warning(\\n        !Constructor.prototype.componentWillRecieveProps,\\n        '%s has a method called ' +\\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\\n        spec.displayName || 'A component'\\n      );\\n      warning(\\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\\n        spec.displayName || 'A component'\\n      );\\n    }\\n\\n    // Reduce time spent doing lookups by setting these on the prototype.\\n    for (var methodName in ReactClassInterface) {\\n      if (!Constructor.prototype[methodName]) {\\n        Constructor.prototype[methodName] = null;\\n      }\\n    }\\n\\n    return Constructor;\\n  }\\n\\n  return createClass;\\n}\\n\\nmodule.exports = factory;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_invariant\",\"condition\",\"format\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"undefined\",\"error\",\"Error\",\"args\",\"argIndex\",\"replace\",\"name\",\"framesToPop\",\"_assign\",\"emptyObject\",\"factory\",\"ReactComponent\",\"isValidElement\",\"ReactNoopUpdateQueue\",\"mixSpecIntoComponent\",\"Constructor\",\"spec\",\"proto\",\"prototype\",\"autoBindPairs\",\"__reactAutoBindPairs\",\"hasOwnProperty\",\"MIXINS_KEY\",\"RESERVED_SPEC_KEYS\",\"mixins\",\"property\",\"isAlreadyDefined\",\"specPolicy\",\"ReactClassInterface\",\"ReactClassMixin\",\"isReactClassMethod\",\"autobind\",\"createMergedResultFunction\",\"createChainedFunction\",\"push\",\"mergeIntoWithNoDuplicateKeys\",\"one\",\"two\",\"key\",\"mergedResult\",\"apply\",\"arguments\",\"chainedFunction\",\"injectedMixins\",\"statics\",\"propTypes\",\"contextTypes\",\"childContextTypes\",\"getDefaultProps\",\"getInitialState\",\"getChildContext\",\"render\",\"componentWillMount\",\"componentDidMount\",\"componentWillReceiveProps\",\"shouldComponentUpdate\",\"componentWillUpdate\",\"componentDidUpdate\",\"componentWillUnmount\",\"UNSAFE_componentWillMount\",\"UNSAFE_componentWillReceiveProps\",\"UNSAFE_componentWillUpdate\",\"updateComponent\",\"ReactClassStaticInterface\",\"getDerivedStateFromProps\",\"displayName\",\"i\",\"length\",\"IsMountedPreMixin\",\"__isMounted\",\"IsMountedPostMixin\",\"replaceState\",\"newState\",\"callback\",\"updater\",\"enqueueReplaceState\",\"isMounted\",\"ReactClassComponent\",\"createClass\",\"fn\",\"props\",\"context\",\"pairs\",\"component\",\"autoBindKey\",\"method\",\"bind\",\"boundMethod\",\"refs\",\"state\",\"initialState\",\"Array\",\"isArray\",\"constructor\",\"forEach\",\"defaultProps\",\"methodName\"]\n}\n"]