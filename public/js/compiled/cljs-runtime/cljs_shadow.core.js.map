{"version":3,"sources":["cljs_shadow/core.cljs"],"mappings":"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","names":["js/cljs-shadow","js/cljs-shadow.core","js/cljs-shadow.core.app-state","cljs-shadow.core/app-state","reagent.core.atom","cljs-shadow.core/img-size","js/cljs-shadow.core.img","cljs-shadow.core/img","js/Image","cljs-shadow.core/imgurl","cljs-shadow.core/img-to-octet","img-data-url","clojure.string/replace","p__31754","map__31755","cljs.core/--destructure-map","cljs.core.get","cljs-shadow.core/on-download","c","props","I","d","js/document","p","data-url","cljs.core.prn","cljs-shadow.core/img-file-to-resized","args","map__31756","img","width","js/Promise","resolve","ctx","factor","js/Math.floor","G__31757","js/URL","cljs-shadow.core/handler","e","fs","f","cljs.core/first","cljs.core/deref","js/console","cljs-shadow.core/on-resize","v","cljs-shadow.core/clear-img","cljs-shadow.core/upload-image-w-size","p1__31758#","cljs-shadow.core/app","cljs.core/reset!","cljs-shadow.core/start","G__31759","G__31760","reagent.core/render-component","cljs-shadow.core/init","cljs-shadow.core/stop","js/console.log"],"sourcesContent":["(ns cljs-shadow.core\n  (:require [reagent.core :as reagent :refer [atom]]\n            [clojure.string :as string]))\n\n(defonce app-state (atom {:text \"Hello world!\"}))\n(def img-size (atom 600))\n\n(defonce img (atom (js/Image.)))\n(def imgurl (atom nil))\n\n(defn img-to-octet [img-data-url]\n  (string/replace\n   img-data-url\n   \"data:image/png\"\n   \"data:application/octet-stream;headers=Content-Disposition%3A%20attachment%3B%20filename=Canvas.png\"))\n\n(defn on-download [{:keys [c] :as props}]\n  (let [I   (js/Image.)\n        d   (-> (.querySelector js/document \"#download\"))\n        p   (-> (.querySelector js/document \"#preview\"))\n        data-url (.toDataURL c)]\n    (prn d)\n    (set! (.-src p)\n          data-url)\n    (set! (.-href d)\n          (img-to-octet data-url))))\n\n(defn img-file-to-resized\n  \"\n  Resize image file.\n\n  :img     (js/File)\n  :width   image size\n  \"\n  [args]\n  (let [{:keys [img width]} args\n        I                   (js/Image.)]\n    (js/Promise.\n     (fn [resolve]\n       (set! (.-onload I)\n             (fn []\n               (let [c            (.createElement js/document \"canvas\")\n                     ctx          (.getContext c \"2d\")\n                     factor       (/ width (.-width I))]\n\n                 (set! (.-width c)\n                       (js/Math.floor\n                        (* factor (.-width I))))\n\n                 (set! (.-height c)\n                       (js/Math.floor\n                        (* factor (.-height I))))\n\n                 (.drawImage ctx I\n                             0 0\n                             (.-width c)\n                             (.-height c))\n\n                 (resolve (.toDataURL c))))))\n\n     (set! (.-src I)\n           (.createObjectURL js/URL img)))))\n\n(defn handler [e]\n  (let [fs      (.. e -target -files)\n        f       (first fs)\n        p       (.querySelector js/document \"#preview\")\n        d       (.querySelector js/document \"#download\")]\n    (-> (img-file-to-resized {:img f :width @img-size})\n        (.then (fn [data-url]\n                 (set! (.-src p) data-url)\n                 (set! (.-href d) (img-to-octet data-url))))\n        (.finally #(.log js/console \"not fucking?\")))))\n\n(defn on-resize [e]\n  (let [I   @img\n        v (.. e -target -value)\n        c   (-> (.querySelector js/document \"#canvas\"))\n        ctx (.getContext c \"2d\")]\n    (prn I)\n    (.clearRect ctx 0 0 2000 2000)\n    (.drawImage ctx  I 0 0)\n    (on-download {:c c})))\n\n(defn clear-img []\n  (let [c       (-> (.querySelector js/document \"#canvas\"))\n        ctx     (.getContext c \"2d\")]\n    (.clearRect ctx 0 0 100 100)))\n\n(defn upload-image-w-size [props]\n)\n\n(defn app []\n  [:div\n   [:div.level.level-items\n    [:div.level-item.level-middle\n     [:input.input {:type \"number\"\n                    :step 100\n                    :value @img-size\n                    :on-change #(reset! img-size (.. % -target -value))}]]\n    [:div.level-item.level-right\n     [:a#download {:download \"resized.jpg\"\n                   :href     \"#\"} \"Download\"]]]\n\n   [:div ;.card.p-3\n    [:div {:style {:border-radius   4\n                   :display         \"flex\"\n                   :justify-content \"center\"\n                   :align-items     \"center\"\n                   :height          \"100%\"}}\n     [:figure.is-4by3\n      [:img#preview {:src \"https://bulma.io/images/placeholders/640x480.png\"}]]]\n\n\n    [:div.is-overlay\n     {:style {:pointer-events \"none\"\n              :display         \"flex\"\n              :justify-content \"center\"\n              :align-items     \"center\"\n              :height          \"100%\"}}\n\n     [:div.file.is-centered.is-boxed.is-success.is-light\n      {:style {:pointer-events \"painted\"}}\n      [:label.file-label\n       [:input.file-input\n        {:on-change handler\n         :type \"file\"}]\n       [:span.file-cta\n        {:style {:position \"fixed\" :left 0 :bottom 0}}\n        [:span.file-label \"Select Image\"]]]]]]])\n\n\n(defn start []\n  (reagent/render-component [app]\n                            (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code is reloaded\n  ;; this is controlled by :before-load in the config\n  (js/console.log \"stop\"))\n"]}